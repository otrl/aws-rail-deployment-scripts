#!/usr/bin/perl

=pod

=head1 cmdaemon - Command Daemon

This is a simple TCP listening daemon (using core Perl modules)
which listens on a user-defined port for an HTTP POST.
When it recieves the POST it will run a user-defined command
and pass the (sanitised) POST parameters as arguments to the
command.

The port and command are set via environmental variables based
on the upper-cased name of the script, followed by _PORT and
_COMMAND.  i.e. if the script is run as F<cmdaemon> then the
varibles to set are B<CMDAEMON_PORT> and B<CMDAEMON_COMMAND>.
You can also set B<CMDAEMON_IDLE_TIMEOUT> (in seconds) to set
the idle timeout when running the command - if there's no more
output for this number of seconds then the command is killed.
The default is 60s.

=cut

use strict;
use POSIX qw(strftime);
use IO::Socket;
use File::Basename;

my $program_name=basename($0);
my $program_var=uc($program_name);

#Characters allowed in the command arguments.
#Any other characters taken from the POST parameters
#will be stripped.
my $allowed_characters='a-zA-Z0-9\'\-\ _:=';

my $port_var="${program_var}_PORT";
my $command_var="${program_var}_COMMAND";
my $timeout_var = "${program_var}_IDLE_TIMEOUT";

my $port = $ENV{$port_var};
my $command = $ENV{$command_var};
my $idle_timeout = $ENV{$timeout_var} ? $ENV{$timeout_var} : 60;


###

if (!$port or !$command) {
 print "Can't run because some environmental variables weren't set:\n${port_var}=${port} ${command_var}=${command}\n";
 exit(1);
}

###

$| = 1;
my $socket = new IO::Socket::INET (
    LocalHost => '0.0.0.0',
    LocalPort => $port,
    Proto => 'tcp',
    Listen => 5,
    Reuse => 1
) or die "cannot create socket $!\n";

print "[$program_name] - " . strftime("%F %T", localtime) . " - Started $program_name ... port: $port, idle timeout: $idle_timeout, command: $command\n";


$SIG{ALRM} = sub { die "timeout" };

while(1) {

 my $client = $socket->accept();
 $client->recv(my $client_request, 1024);
 my @requests = split /\n/, $client_request;

 my $client_address = $client->peerhost();
 my $initial_header = $requests[0];
 $initial_header =~ s/[^a-zA-Z0-9_: \.\/]+//g;
 my $this_request = urldecode($requests[-1]);
 $this_request =~ s/&/:::/g;
 $this_request =~ s/[^$allowed_characters]+//g;

 print "[${program_name}] - ";
 print strftime("%F %T", localtime);
 print " - $client_address - $initial_header - $this_request - ";

 if (grep(/^POST \/ HTTP/, @requests)) {

  my @arguments;

  my @params = split /:::/, $this_request;
  foreach my $param (@params) {
   push @arguments, $param;
  }

  print "200\n";
  $client->send("HTTP/1.0 200 OK\nContent-Type: text/plain\r\n\n");

  my @this_cmd = split / /, $command;
  push(@this_cmd, @arguments);

  my $child_pid;
  my $cmd_pipe;

  ##### Eval block to allow us to set a timeout on the running of the command.

  eval {

   alarm($idle_timeout);
   $child_pid = open($cmd_pipe, '-|', @this_cmd) or die("Can't launch command: @this_cmd: $!\n");

   while (defined( my $line = <$cmd_pipe> )) {
    $client->send($line);
    alarm($idle_timeout);
   }

   alarm(0);
   close($cmd_pipe);

  };

  #### If there was a timeout or the eval block errored...
  if ($@) {
   if ($@ =~ /timeout/) {
    kill 'TERM', $child_pid;
     close($cmd_pipe);
     print "[$program_name] - ";
     print strftime("%F %T", localtime);
     print " - WARNING - Killed idle command process after $idle_timeout seconds\n";
     $client->send("WARNING: reached idle timeout ($idle_timeout seconds)\n\n");
   }
   else {
    #Propagate a more serious error
    alarm(0);
    die;
   }
  }


 }
 else {
  print "405\n";
  $client->send("HTTP/1.0 405 Method Not Allowed\r\n");
 }

 shutdown($client, 1);
}

$socket->close();

exit(0);


####

sub urldecode {
    my $s = shift;
    $s =~ s/\%([A-Fa-f0-9]{2})/pack('C', hex($1))/seg;
    $s =~ s/\+/ /g;
    return $s;
}
