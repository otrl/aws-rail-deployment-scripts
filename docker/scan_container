#!/bin/bash


#This script is called as part of a Travis build.  After a container image is build
#via 'docker build' we use this to scan the image for vulnerabilities using a local
#version of Clair.  The scan is run before the image is pushed to the Docker repository.
#
#The name of the local image is passed via the environment variable IMAGE_TO_SCAN
#
#FAILURE_VULNERABILITY_LEVEL (set below) determines which CVE severity level we'll
#fail a build on if anything in the container meets that level.
#
#Additionally we pass Clair a whitelist of CVE IDs that, if detected, won't fail the
#build.  The purpose of that is that there are likely to be vulnerabilities that can't
#be fixed due to no updated package being available and which we might not consider
#to critical.
#The whitelist is generated by render_whitelist() below.


####################################################

FAILURE_VULNERABILITY_LEVEL="High"

####################################################

function render_whitelist() {

cat <<EoF>/tmp/whitelist.yml

generalwhitelist:
  CVE-2018-1000001: eglibc
  CVE-2016-2779: util-linux

EoF

}

####################################################


if [ -z "$IMAGE_TO_SCAN" ]; then

 echo
 echo "You need to pass the name of a local Docker image to scan via IMAGE_TO_SCAN"
 echo "e.g. export IMAGE_TO_SCAN=\"local/webserver\""
 echo
 exit 1

fi

echo "Creating the CVE whitelist..."
render_whitelist

echo "Fetching clair_scanner from github..."
curl -s https://api.github.com/repos/arminc/clair-scanner/releases/latest | grep "browser_download_url.*clair-scanner_linux_amd64" | cut -d : -f 2,3 | tr -d \" | wget -O /tmp/clair_scanner -qi -
chmod +x /tmp/clair_scanner

echo "Launching the latest Clair DB..."
docker run -p 5432:5432 -d --name db arminc/clair-db:latest

echo "Launching clair-local-scan..."
docker run -p 6060:6060 --link db:postgres -d --name clair arminc/clair-local-scan:v2.0.4

echo "Scanning $IMAGE_TO_SCAN..."
/tmp/clair_scanner -t $FAILURE_VULNERABILITY_LEVEL --ip=172.17.0.1 -w /tmp/whitelist.yml $IMAGE_TO_SCAN


if [ "$?" -ne "0" ]; then
 echo
 echo "This image failed the vulnerability scan."
 echo
 exit 1
fi



